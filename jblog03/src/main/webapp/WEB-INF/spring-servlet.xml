<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- auto proxy -->

	<!-- validator, conversionService, messageConverter를 자동으로 등록 -->
	<mvc:annotation-driven>
		<!-- 1. 어노테이션을 사용하게 해줌 2. mvc에 필요한 bean들을 자동으로 등록 -->
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<!--지원하는 오브젝트 타입은 String이고, 미디어타입은 모든 것을 다 지원한다. 파라미터에 사용할 경우 HTTP 본문을 
					그대로 String으로 가져올 수 있게되고, 리턴에 사용할 경우 단순 문자열을 그대로 전달해줄 수 있다. Content-Type은 
					text/plain으로 전달된다. -->
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<!-- 1. Java Object를 JSON으로 변환 
					2.Jackson의 ObjectMapper를 이용해서 JSON과 오브젝트 사이의 변환을 지원한다. 
					지원하는 미디어 타입은 application/json이다. 변환하는 오브젝트 타입의 제한은 없지만 프로퍼티를 
					가진 자바빈 스타일이나 HashMap을 이용해야 정확한 변환 결과를 얻을 수 있다. -->
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 서블릿 컨테이너(tomcat)의 DefaultServlet 위임(Delegate) Handler -->
	<mvc:default-servlet-handler />
	<!-- 1. 요청 URL에 매핑되는 컨트롤러를 검색한다. A. 존재할 경우, 컨트롤러를 이용해서 클라이언트 요청을 처리한다. 2. 
		디폴트 서블릿 핸들러가 등록되어 있지 않다면, "<mvc:default-servlet-handler />"를 써주지 않았다면 A. 
		404응답 에러를 전송한다. 3. 디폴트 서블릿 핸들러가 등록되어 있으면, 디폴트 서블릿 핸들러에 요청을 전달한다. A. 디폴트 서블릿 
		핸들러는 WAS의 디폴트 서블릿에 요청을 전달한다. -->
	
	<!-- Interceptors -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/user/auth" />
			<bean class="com.douzone.jblog.security.LoginInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/user/logout" />
			<bean class="com.douzone.jblog.security.LogoutInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/assets/**" />
			<mvc:exclude-mapping path="/user/**" />
			<mvc:exclude-mapping path="/category/**" />
			<mvc:exclude-mapping path="/images/**" />
			
			<bean class="com.douzone.jblog.interceptor.BlogInterceptor" />
			
		</mvc:interceptor>
	<mvc:interceptor>
			<mvc:mapping path="/**/admin**/**" />
			<!-- <mvc:exclude-mapping path="/user/auth" />
			<mvc:exclude-mapping path="/user/logout" />
			<mvc:exclude-mapping path="/assets/**" /> -->
			<bean class="com.douzone.jblog.security.AuthInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- ViewResolver 설정 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 멀티파트 리졸버 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 최대업로드 가능한 바이트크기 -->
		<property name="maxUploadSize" value="52428800" />
		<!-- 디스크에 임시 파일을 생성하기 전에 메모리에 보관할수있는 최대 바이트 크기 -->
		<!-- property name="maxInMemorySize" value="52428800" / -->
		<!-- defaultEncoding -->
		<property name="defaultEncoding" value="utf-8" />

	</bean>
	 <!-- Message Source --> 
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages/messages_ko</value>
			</list>
		</property>
	</bean>
	
	<!-- mvc url-resource mapping -->
	<mvc:resources mapping="/images/**"
		location="file:/jblog-upload-images/" />	






	<context:annotation-config />

	<context:component-scan
		base-package="com.douzone.jblog.controller, com.douzone.jblog.exception" />
		
		


</beans>